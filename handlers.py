from datetime import datetime, timedelta
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import keyboard as kb
from database import (
    save_user,
    get_user_limit_and_reset_date,
    update_user_limit_and_reset_date,
    update_user_gmail_password,
    get_user_gmail_password,
    delete_user_gmail
)
from mail_sender import send_email_smtp
from config import TG_ADMIN_IDS

router = Router()

class MailStates(StatesGroup):
    waiting_gmail = State()
    waiting_password = State()
    waiting_body = State()
    waiting_recipients = State()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def start_cmd(message: Message):
    user = message.from_user
    save_user(user.id, user.username or f"user_{user.id}")
    await message.answer(f"""
<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! üëã</b>\n
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å <b>email-—Ä–∞—Å—Å—ã–ª–æ–∫</b>. ‚úâÔ∏è\n
–ú—ã —Å–æ–∑–¥–∞–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–≥–∞–µ—Ç <i>–ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ</i> –æ–±—â–∞—Ç—å—Å—è —Å –≤–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π –ø—Ä—è–º–æ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ Google.\n
<b>–ü—Ä–æ—Å—Ç–æ</b>, <b>—É–¥–æ–±–Ω–æ</b> –∏ <b>—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ</b> ‚Äî –≤—Å—ë, —á—Ç–æ–±—ã –≤–∞—à–∏ –ø–∏—Å—å–º–∞ –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –∞–¥—Ä–µ—Å–∞—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç. üöÄ\n\n

<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ <code>/add_akk</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å Gmail-–∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ <code>/delet_akk email@gmail.com</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç

‚ö†Ô∏è <b>–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏!</b>
–í–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å –±–∞–≥–∏ ‚Äî —Å–æ–æ–±—â–∞–π—Ç–µ –æ –Ω–∏—Ö –≤ <b>—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É</b>, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞ ‚Äî –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã! üôå

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–∞—Å—Å—ã–ª–∫–æ–π!
""", reply_markup=kb.menu_kb, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /add_akk
@router.message(Command('add_akk'))
async def add_account_cmd(message: Message, state: FSMContext):
    if message.from_user.id in TG_ADMIN_IDS:
        await message.answer("–í—ã –∞–¥–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã.")
        return

    gmail, password = get_user_gmail_password(message.from_user.id)
    if gmail:
        await message.answer(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç: {gmail}\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π ‚Äî —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∫–æ–º–∞–Ω–¥–æ–π /delet_akk email@gmail.com")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Gmail-–∞–¥—Ä–µ—Å (—Å –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞):")
    await state.set_state(MailStates.waiting_gmail)

@router.message(MailStates.waiting_gmail)
async def prompt_password(message: Message, state: FSMContext):
    email = message.text.strip()

    if not email.endswith('@gmail.com'):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Gmail-–∞–¥—Ä–µ—Å.")
        return

    await state.update_data(gmail=email)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Gmail (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Google):")
    await state.set_state(MailStates.waiting_password)

@router.message(MailStates.waiting_password)
async def save_gmail_and_password(message: Message, state: FSMContext):
    password = message.text.strip()
    data = await state.get_data()
    email = data.get("gmail")

    update_user_gmail_password(message.from_user.id, email, password)

    await message.answer(f"‚úÖ Gmail-–∞–∫–∫–∞—É–Ω—Ç {email} –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /delet_akk
@router.message(Command('delet_akk'))
async def delete_account_cmd(message: Message):
    if message.from_user.id in TG_ADMIN_IDS:
        await message.answer("–í—ã –∞–¥–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delet_akk email@gmail.com")
        return

    email = args[1]
    user_id = message.from_user.id

    current_email, _ = get_user_gmail_password(user_id)
    if current_email == email:
        delete_user_gmail(user_id)
        await message.answer(f"–ê–∫–∫–∞—É–Ω—Ç {email} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
@router.callback_query(F.data == 'start_sms')
async def choose_sms_mode(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    gmail, password = get_user_gmail_password(user_id)

    if not gmail or not password:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /add_akk")
        await callback.answer()
        return

    await callback.message.answer(f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {gmail}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:")
    await state.set_state(MailStates.waiting_body)
    await callback.answer()

@router.message(MailStates.waiting_body)
async def get_body_and_ask_recipients(message: Message, state: FSMContext):
    await state.update_data(body=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email(—ã) –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ):")
    await state.set_state(MailStates.waiting_recipients)

@router.message(MailStates.waiting_recipients)
async def get_recipients_and_send(message: Message, state: FSMContext):
    recipients_text = message.text.strip()
    recipients = [r.strip() for r in recipients_text.split(",") if r.strip()]

    data = await state.get_data()
    body = data.get("body")
    user_id = message.from_user.id
    gmail, password = get_user_gmail_password(user_id)

    if not gmail or not password:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    current_limit, last_reset = get_user_limit_and_reset_date(user_id)
    if current_limit <= 0:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å last_reset
        last_reset_time = datetime.fromisoformat(last_reset)
        if datetime.now() < last_reset_time + timedelta(hours=24):
            await message.answer("‚ùå –õ–∏–º–∏—Ç —Ä–∞—Å—Å—ã–ª–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return
        else:
            # –ü—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            update_user_limit_and_reset_date(user_id, 5)
            current_limit = 5

    # –£–º–µ–Ω—å—à–∞–µ–º –ª–∏–º–∏—Ç
    update_user_limit_and_reset_date(user_id, current_limit - 1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    for recipient in recipients:
        success = send_email_smtp(gmail, password, recipient, "–†–∞—Å—Å—ã–ª–∫–∞", body)
        if not success:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {recipient}")
            await state.clear()
            return

    await message.answer(f"‚úÖ –ü–∏—Å—å–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞: {', '.join(recipients)}\n\n–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.", reply_markup=kb.menu_kb)
    await state.clear()

# FAQ
faq_text = """
<b>‚ùì–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</b>

<b>1. –ó–∞—á–µ–º –Ω—É–∂–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º?</b>
–ß—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π. –í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äî 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –≤ –¥–µ–Ω—å.

<b>2. –ß–µ–º –ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ª—É—á—à–µ?</b>
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏

<b>3. –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π?</b>
–î–∞, –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∫–∞–∫ –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.

<b>4. –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —ç—Ç–æ?</b>
–î–∞, –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã.
"""

@router.callback_query(F.data == 'faq_sms')
async def show_faq(callback: CallbackQuery):
    await callback.message.answer(faq_text, parse_mode="HTML")
    await callback.answer()

# –ü—Ä–æ—Ñ–∏–ª—å
@router.callback_query(F.data == 'profil')
async def show_profile(callback: CallbackQuery):
    user = callback.from_user
    limit_user, last_reset = get_user_limit_and_reset_date(user.id)

    last_reset_time = datetime.fromisoformat(last_reset)
    next_reset_time = last_reset_time + timedelta(hours=24)
    time_left = next_reset_time - datetime.now()

    if time_left.total_seconds() <= 0:
        time_left_str = "–ì–æ—Ç–æ–≤–æ"
    else:
        hours, remainder = divmod(int(time_left.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        time_left_str = f"{hours:02d}:{minutes:02d}:{seconds:02d}"

    profile_text = f"""
<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>

<b>–ò–º—è:</b> {user.first_name} {user.last_name or ''}
<b>ID:</b> {user.id}
<b>–ú–æ–∏ –ª–∏–º–∏—Ç—ã:</b> {limit_user}
"""
    if limit_user <= 0:
        profile_text += f"\n<b>–°–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤:</b> {time_left_str}"

    await callback.message.edit_text(profile_text, parse_mode="HTML")
    await callback.answer()