from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import sqlite3
from config import TG_ADMIN_IDS
from database import get_user_limit_and_reset_date, update_user_limit_and_reset_date, get_total_users

router = Router()

# bot –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —Å—é–¥–∞ –∫–∞–∫ –æ–±—ä–µ–∫—Ç
async def set_bot_instance(bot_instance):
    global bot
    bot = bot_instance

@router.message(Command('add_zapros'))
async def admin_add_requests(message: Message):
    if message.from_user.id not in TG_ADMIN_IDS:
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_zapros <user_id> <count>")
        return

    try:
        target_user_id = int(args[1])
        count = int(args[2])
    except ValueError:
        await message.answer("ID –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
        return

    current_limit, _ = get_user_limit_and_reset_date(target_user_id)
    new_limit = current_limit + count
    update_user_limit_and_reset_date(target_user_id, new_limit)

    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} –∑–∞–ø—Ä–æ—Å–æ–≤. –í—Å–µ–≥–æ: {new_limit}")

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: /delet_zapros <user_id>
@router.message(Command('delet_zapros'))
async def admin_delete_requests(message: Message):
    if message.from_user.id not in TG_ADMIN_IDS:
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delet_zapros <user_id>")
        return

    try:
        target_user_id = int(args[1])
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –û–±–Ω—É–ª—è–µ–º –ª–∏–º–∏—Ç
    update_user_limit_and_reset_date(target_user_id, 0)

    await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –≤—Å–µ –ª–∏–º–∏—Ç—ã —É–¥–∞–ª–µ–Ω—ã (–æ–±–Ω—É–ª—ë–Ω).")

@router.message(Command('call'))
async def admin_broadcast(message: Message):
    if message.from_user.id not in TG_ADMIN_IDS:
        return

    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /call")
        return

    broadcast_text = text[1]

    # –ü–æ–ª—É—á–∏–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏–∑ –ë–î
    conn = sqlite3.connect("mail_bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()

    success = 0
    failed = 0

    for user_id in user_ids:
        try:
            await bot.send_message(user_id, f"üì¢ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{broadcast_text}")
            success += 1
        except Exception:
            failed += 1

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}")

@router.message(Command('stata'))
async def admin_stats(message: Message):
    if message.from_user.id not in TG_ADMIN_IDS:
        return

    total_users = get_total_users()
    await message.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {total_users}")